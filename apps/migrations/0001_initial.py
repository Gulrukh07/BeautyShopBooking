# Generated by Django 5.2.7 on 2025-10-27 06:29

import django.db.models.deletion
import django.utils.timezone
import django_ckeditor_5.fields
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Business',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('name', models.CharField(max_length=255)),
                ('description', django_ckeditor_5.fields.CKEditor5Field(blank=True, null=True)),
                ('type', models.CharField(choices=[('clinic', 'Clinic'), ('barbershop', 'Barber Shop'), ('beautyshop', 'Beauty Shop'), ('sport', 'Sport')], max_length=50)),
                ('address', models.CharField(max_length=255)),
                ('latitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True)),
                ('longitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True)),
                ('contact', models.CharField(blank=True, max_length=255, null=True)),
                ('opening_hours', models.JSONField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('phone_number', models.CharField(max_length=15, unique=True)),
                ('role', models.CharField(choices=[('specialist', 'Specialist'), ('admin', 'Admin'), ('client', 'Client')], max_length=50)),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='users/%Y/%m/%d')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Appointment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('canceled', 'Canceled'), ('moved', 'Moved')], default='pending', max_length=20)),
                ('client_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='appointments_as_client', to=settings.AUTH_USER_MODEL)),
                ('specialist_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='appointments_as_specialist', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('message', django_ckeditor_5.fields.CKEditor5Field()),
                ('type', models.CharField(choices=[('booking', 'Booking'), ('reminder', 'Reminder'), ('cancelled', 'Cancelled')], max_length=50)),
                ('is_read', models.BooleanField(default=False)),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('rating', models.CharField(choices=[('1', '1'), ('2', '2'), ('3', '3'), ('4', '4'), ('5', '5')], default='5', max_length=20)),
                ('comment', django_ckeditor_5.fields.CKEditor5Field(blank=True, null=True)),
                ('appointment_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='apps.appointment')),
                ('client_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('name', models.CharField(max_length=255)),
                ('description', django_ckeditor_5.fields.CKEditor5Field(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('business_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='services', to='apps.business')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='BusinessWorker',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('position', models.CharField(max_length=255)),
                ('bio', django_ckeditor_5.fields.CKEditor5Field(blank=True, null=True)),
                ('years_of_experience', models.BigIntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
                ('specialist_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='business_workers', to=settings.AUTH_USER_MODEL)),
                ('service_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='business_workers', to='apps.service')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='appointment',
            name='service_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='appointments', to='apps.service'),
        ),
        migrations.CreateModel(
            name='SubService',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('name', models.CharField(max_length=255)),
                ('description', django_ckeditor_5.fields.CKEditor5Field(blank=True, null=True)),
                ('service_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sub_services', to='apps.service')),
                ('specialist_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sub_services', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ServiceBySpecialist',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('price', models.BigIntegerField()),
                ('duration', models.BigIntegerField()),
                ('specialist_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='specialist_services', to=settings.AUTH_USER_MODEL)),
                ('sub_service_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='specialist_services', to='apps.subservice')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='WorkSchedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
                ('is_active', models.BooleanField(default=True)),
                ('specialist_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='work_schedules', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TimeOff',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('date', models.DateField()),
                ('reason', django_ckeditor_5.fields.CKEditor5Field(blank=True, null=True)),
                ('specialist_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='time_offs', to=settings.AUTH_USER_MODEL)),
                ('work_schedule_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='time_offs', to='apps.workschedule')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
